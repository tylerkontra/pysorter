---
### A test/default filetypes specification ###
# non-rule configuration
config:
  # all non-absolute paths these are relative to this file
  - include:
    - name: foo
      path: foo.yml

      # name inferred as bar
    - path: bar.yml

  # include rules defined somewhere in python
  - pyinclude:
    # this variable doesn't exist yet, but will (if) this gets implemented
    - pysorter.rules.mimetypes

  - order:
    # x and y indicate groups
    - 'bar:xxx'

    # in this file
    - :documents

    # include all groups
    - 'foo:*'

    # all (remaining) groups from this file
    - ':*'

    # the python included rules
    - pysorter_rules_mimetypes

# rule definitions
documents:
  # a default priority for this group (when compared to other groups)
  # this could lead to confusion, hence the g prefix
  gpri : 0
  # (optional) prefix for all consequent destination.
  # This is literally prepended, so no implicit slash will be added
  dst-prefix: 'foo/'
  # a default destination inherited by all
  dst : 'documents/'
  rules:
      - pat: '(?P<year>\d{4})\.pdf$'
        dst: 'documents/pdfs_{year}.pdf'

      # long form
      - pat: '\.pdf$'
        dst: 'documents/pdfs/'
        pri: -10 # optional priority (higher takes precedence)

      # alternative shortform (also excluding quotes, which is apparently legal)
      # here only the pattern is given and the destination is inferred from dst.
      # would only be legal when group dst is defined
      - \.docx$

      # another shortform as a list
      - ['\.xlsx$', 'documents/excel/']

      # OR
      - - '\.xlsx$'
        - 'documents/excel/'

      # Reserved keyword 'skip' (skip these filetypes instead of moving)
      # for these the dst would not matter
      - skips: ['\.doc$', ]